{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-langflow-json-from-chat.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A Langflow JSON flow generator AI agent.\n *\n * - generateLangflowJson - A function that handles the Langflow JSON flow generation process.\n * - GenerateLangflowJsonInput - The input type for the generateLangflowJson function.\n * - GenerateLangflowJsonOutput - The return type for the generateLangflowJson function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateLangflowJsonInputSchema = z.object({\n  chatHistory: z\n    .string()\n    .describe('The chat history describing the desired Langflow flow.'),\n});\nexport type GenerateLangflowJsonInput = z.infer<typeof GenerateLangflowJsonInputSchema>;\n\nconst GenerateLangflowJsonOutputSchema = z.object({\n  langflowJson: z\n    .string()\n    .describe('The Langflow JSON configuration representing the generated flow.'),\n});\nexport type GenerateLangflowJsonOutput = z.infer<typeof GenerateLangflowJsonOutputSchema>;\n\nexport async function generateLangflowJson(input: GenerateLangflowJsonInput): Promise<GenerateLangflowJsonOutput> {\n  return generateLangflowJsonFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateLangflowJsonPrompt',\n  input: {schema: GenerateLangflowJsonInputSchema},\n  output: {schema: GenerateLangflowJsonOutputSchema},\n  prompt: `You are an AI expert in Langflow, tasked with generating Langflow JSON configurations based on user descriptions.\n\n  Instructions:\n  - Carefully analyze the user's chat history to understand the desired Langflow flow.\n  - Translate the user's requirements into a valid Langflow JSON configuration.\n  - Ensure the generated JSON is well-formatted and adheres to Langflow's schema.\n  - Consider various Langflow components such as chains, agents, prompts, and tools to construct the flow.\n  - Always include necessary configurations for each component, such as API keys, model names, and parameters.\n  - If the user asks to connect to services, consider using tools to retrieve external information.\n  - Return ONLY valid JSON in the output.\n  - Do not return any other text or explanation.\n  - If the user has not provided enough information to generate the JSON, return a valid JSON with a message saying that more information is needed.\n\nChat History:\n{{{chatHistory}}}`,\n});\n\nconst generateLangflowJsonFlow = ai.defineFlow(\n  {\n    name: 'generateLangflowJsonFlow',\n    inputSchema: GenerateLangflowJsonInputSchema,\n    outputSchema: GenerateLangflowJsonOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ;IAAgC;IACjD,QAAQ,CAAC;;;;;;;;;;;;;;iBAcM,CAAC;AAClB;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/refine-langflow-flow-from-chat.ts"],"sourcesContent":["// refine-langflow-flow-from-chat.ts\n'use server';\n\n/**\n * @fileOverview Refines an existing Langflow flow based on a chat conversation.\n *\n * - refineLangflowFlowFromChat - A function that refines the Langflow flow.\n * - RefineLangflowFlowFromChatInput - The input type for the refineLangflowFlowFromChat function.\n * - RefineLangflowFlowFromChatOutput - The return type for the refineLangflowFlowFromChat function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RefineLangflowFlowFromChatInputSchema = z.object({\n  flowJson: z.string().describe('The existing Langflow JSON configuration as a string.'),\n  chatHistory: z.string().describe('The chat history as a string.'),\n});\nexport type RefineLangflowFlowFromChatInput = z.infer<typeof RefineLangflowFlowFromChatInputSchema>;\n\nconst RefineLangflowFlowFromChatOutputSchema = z.object({\n  refinedFlowJson: z.string().describe('The refined Langflow JSON configuration as a string.'),\n});\nexport type RefineLangflowFlowFromChatOutput = z.infer<typeof RefineLangflowFlowFromChatOutputSchema>;\n\nexport async function refineLangflowFlowFromChat(input: RefineLangflowFlowFromChatInput): Promise<RefineLangflowFlowFromChatOutput> {\n  return refineLangflowFlowFromChatFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'refineLangflowFlowFromChatPrompt',\n  input: {schema: RefineLangflowFlowFromChatInputSchema},\n  output: {schema: RefineLangflowFlowFromChatOutputSchema},\n  prompt: `You are a Langflow expert. You will be provided with an existing Langflow JSON configuration and a chat history. Based on the chat history, you will refine the Langflow JSON configuration.\n\nExisting Langflow JSON Configuration:\n{{{flowJson}}}\n\nChat History:\n{{{chatHistory}}}\n\nRefined Langflow JSON Configuration:`,\n});\n\nconst refineLangflowFlowFromChatFlow = ai.defineFlow(\n  {\n    name: 'refineLangflowFlowFromChatFlow',\n    inputSchema: RefineLangflowFlowFromChatInputSchema,\n    outputSchema: RefineLangflowFlowFromChatOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return {\n      refinedFlowJson: output!.refinedFlowJson,\n    };\n  }\n);\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;;;AAGpC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGO,eAAe,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;;;;;;;;oCAQyB,CAAC;AACrC;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;QACL,iBAAiB,OAAQ,eAAe;IAC1C;AACF;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-langflow-improvements.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A Langflow flow improvement suggestion AI agent.\n *\n * - suggestLangflowImprovements - A function that suggests improvements to a Langflow flow.\n * - SuggestLangflowImprovementsInput - The input type for the suggestLangflowImprovements function.\n * - SuggestLangflowImprovementsOutput - The return type for the suggestLangflowImprovements function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestLangflowImprovementsInputSchema = z.object({\n  langflowJson: z\n    .string()\n    .describe('The Langflow JSON configuration to improve.'),\n  instructions: z\n    .string()\n    .describe('Instructions for what to improve in the Langflow JSON.'),\n});\nexport type SuggestLangflowImprovementsInput =\n  z.infer<typeof SuggestLangflowImprovementsInputSchema>;\n\nconst SuggestLangflowImprovementsOutputSchema = z.object({\n  improvedLangflowJson: z\n    .string()\n    .describe('The improved Langflow JSON configuration.'),\n  explanation: z\n    .string()\n    .describe('Explanation of the improvements made.'),\n});\nexport type SuggestLangflowImprovementsOutput =\n  z.infer<typeof SuggestLangflowImprovementsOutputSchema>;\n\nexport async function suggestLangflowImprovements(\n  input: SuggestLangflowImprovementsInput\n): Promise<SuggestLangflowImprovementsOutput> {\n  return suggestLangflowImprovementsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'suggestLangflowImprovementsPrompt',\n  input: {schema: SuggestLangflowImprovementsInputSchema},\n  output: {schema: SuggestLangflowImprovementsOutputSchema},\n  prompt: `You are an AI expert in Langflow flow design. You take a Langflow JSON configuration and instructions on how to improve it, and return an improved Langflow JSON configuration and an explanation of the improvements made.\n\nLangflow JSON:\\n{{{langflowJson}}}\n\nInstructions:\\n{{{instructions}}}\n\nImproved Langflow JSON:`,\n});\n\nconst suggestLangflowImprovementsFlow = ai.defineFlow(\n  {\n    name: 'suggestLangflowImprovementsFlow',\n    inputSchema: SuggestLangflowImprovementsInputSchema,\n    outputSchema: SuggestLangflowImprovementsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;IACZ,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;AACd;AAIA,MAAM,0CAA0C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvD,sBAAsB,uIAAA,CAAA,IAAC,CACpB,MAAM,GACN,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAIO,eAAe,4BACpB,KAAuC;IAEvC,OAAO,gCAAgC;AACzC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsC;IACtD,QAAQ;QAAC,QAAQ;IAAuC;IACxD,QAAQ,CAAC;;;;;;uBAMY,CAAC;AACxB;AAEA,MAAM,kCAAkC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport {\n  generateLangflowJson,\n} from \"@/ai/flows/generate-langflow-json-from-chat\";\nimport {\n  refineLangflowFlowFromChat,\n} from \"@/ai/flows/refine-langflow-flow-from-chat\";\nimport {\n  suggestLangflowImprovements,\n} from \"@/ai/flows/suggest-langflow-improvements\";\n\n// Check if the Gemini API key is set in the environment variables\nexport async function isApiKeySet(): Promise<boolean> {\n  return !!process.env.GOOGLE_API_KEY;\n}\n\n// Handle incoming chat messages\nexport async function handleChatMessage(\n  chatHistory: string,\n  currentJson: string\n): Promise<{ json?: string; error?: string }> {\n  try {\n    if (!process.env.GOOGLE_API_KEY) {\n      throw new Error(\"GOOGLE_API_KEY is not set in the environment.\");\n    }\n\n    let resultJson: string;\n\n    if (!currentJson) {\n      // If no JSON exists, generate a new one\n      const result = await generateLangflowJson({ chatHistory });\n      resultJson = result.langflowJson;\n    } else {\n      // If JSON exists, refine it based on the new chat message\n      const result = await refineLangflowFlowFromChat({\n        flowJson: currentJson,\n        chatHistory,\n      });\n      resultJson = result.refinedFlowJson;\n    }\n\n    // Validate the generated JSON\n    JSON.parse(resultJson);\n    return { json: resultJson };\n  } catch (error: any) {\n    console.error(\"Error handling chat message:\", error);\n    if (error instanceof SyntaxError) {\n      return { error: \"The generated flow is not valid JSON. Please try again.\" };\n    }\n    return { error: error.message || \"An unknown error occurred.\" };\n  }\n}\n\n// Suggest improvements for the current flow\nexport async function handleSuggestImprovements(\n  langflowJson: string,\n  instructions: string\n): Promise<{ improvedJson?: string; explanation?: string; error?: string }> {\n  try {\n    if (!process.env.GOOGLE_API_KEY) {\n      throw new Error(\"GOOGLE_API_KEY is not set in the environment.\");\n    }\n    \n    const result = await suggestLangflowImprovements({\n      langflowJson,\n      instructions,\n    });\n    \n    // Validate the improved JSON\n    JSON.parse(result.improvedLangflowJson);\n\n    return {\n      improvedJson: result.improvedLangflowJson,\n      explanation: result.explanation,\n    };\n  } catch (error: any) {\n    console.error(\"Error suggesting improvements:\", error);\n     if (error instanceof SyntaxError) {\n      return { error: \"The improved flow is not valid JSON. Please try again.\" };\n    }\n    return { error: error.message || \"An unknown error occurred.\" };\n  }\n}\n\n// Send the generated flow to the Langflow API\nexport async function sendToLangflow(\n  flowJson: string\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    const parsedFlow = JSON.parse(flowJson);\n    const flowName = parsedFlow?.data?.name || `FlowCraft-${Date.now()}`;\n\n    // Langflow's API to create/update a flow is via POST to /api/v1/flows/\n    const response = await fetch(\"http://127.0.0.1:7860/api/v1/flows/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(parsedFlow),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(\n        `Langflow API Error (${response.status}): ${\n          errorData.detail || \"Unknown error\"\n        }`\n      );\n    }\n\n    return { success: true };\n  } catch (error: any) {\n    console.error(\"Error sending to Langflow:\", error);\n    if (error.message.includes('ECONNREFUSED')) {\n        return { success: false, error: 'Connection refused. Is your local Langflow instance running at http://127.0.0.1:7860?' };\n    }\n    return { success: false, error: error.message || \"An unknown error occurred.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AAGA;AAGA;;;;;;;AAKO,eAAe;IACpB,OAAO,CAAC,CAAC,QAAQ,GAAG,CAAC,cAAc;AACrC;AAGO,eAAe,kBACpB,WAAmB,EACnB,WAAmB;IAEnB,IAAI;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI;QAEJ,IAAI,CAAC,aAAa;YAChB,wCAAwC;YACxC,MAAM,SAAS,MAAM,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE;gBAAE;YAAY;YACxD,aAAa,OAAO,YAAY;QAClC,OAAO;YACL,0DAA0D;YAC1D,MAAM,SAAS,MAAM,CAAA,GAAA,gKAAA,CAAA,6BAA0B,AAAD,EAAE;gBAC9C,UAAU;gBACV;YACF;YACA,aAAa,OAAO,eAAe;QACrC;QAEA,8BAA8B;QAC9B,KAAK,KAAK,CAAC;QACX,OAAO;YAAE,MAAM;QAAW;IAC5B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,IAAI,iBAAiB,aAAa;YAChC,OAAO;gBAAE,OAAO;YAA0D;QAC5E;QACA,OAAO;YAAE,OAAO,MAAM,OAAO,IAAI;QAA6B;IAChE;AACF;AAGO,eAAe,0BACpB,YAAoB,EACpB,YAAoB;IAEpB,IAAI;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,yJAAA,CAAA,8BAA2B,AAAD,EAAE;YAC/C;YACA;QACF;QAEA,6BAA6B;QAC7B,KAAK,KAAK,CAAC,OAAO,oBAAoB;QAEtC,OAAO;YACL,cAAc,OAAO,oBAAoB;YACzC,aAAa,OAAO,WAAW;QACjC;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,kCAAkC;QAC/C,IAAI,iBAAiB,aAAa;YACjC,OAAO;gBAAE,OAAO;YAAyD;QAC3E;QACA,OAAO;YAAE,OAAO,MAAM,OAAO,IAAI;QAA6B;IAChE;AACF;AAGO,eAAe,eACpB,QAAgB;IAEhB,IAAI;QACF,MAAM,aAAa,KAAK,KAAK,CAAC;QAC9B,MAAM,WAAW,YAAY,MAAM,QAAQ,CAAC,UAAU,EAAE,KAAK,GAAG,IAAI;QAEpE,uEAAuE;QACvE,MAAM,WAAW,MAAM,MAAM,uCAAuC;YAClE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MACR,CAAC,oBAAoB,EAAE,SAAS,MAAM,CAAC,GAAG,EACxC,UAAU,MAAM,IAAI,iBACpB;QAEN;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB;YACxC,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAwF;QAC5H;QACA,OAAO;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAA6B;IAChF;AACF;;;IA1GsB;IAKA;IAqCA;IA+BA;;AAzEA,+OAAA;AAKA,+OAAA;AAqCA,+OAAA;AA+BA,+OAAA","debugId":null}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleChatMessage as '6054baa7ee3c08d7746e3ac753cbb17a08ef6c5d7d'} from 'ACTIONS_MODULE0'\nexport {isApiKeySet as '00041f1c206980f8f184f9d9b0371b99d4300e097a'} from 'ACTIONS_MODULE0'\nexport {sendToLangflow as '4096a526c3f88a8ee92d08b98f1cc69d6523fe931a'} from 'ACTIONS_MODULE0'\nexport {handleSuggestImprovements as '605e4a8ed255d0e7b1558e9a6462c7b5a8122fe6eb'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 642, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 656, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}